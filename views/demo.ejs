<!DOCTYPE HTML>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.slim.min.js"></script>
    <title>Wi-Fi Tracking and User Analysis</title>
    <style>
      #myCanvas {
      background-repeat: no-repeat;
      background-image:url("/views/hkust_26.jpg");
      height: 800px
      }
      table, th, td {
      text-align:center;
      }
      th, td {
      width: 24%;
      }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-toggleable-md navbar-inverse fixed-top bg-inverse"> </nav>
    <div class="jumbotron">
      <div class="container">
	<h1 class="display-3">Wi-Fi Tracking and User Analysis</h1>
	<p>Author: DENG Zhiheng, LI Zhihang, QIU Yuan, ZHANG Yifeng</p>
      </div>
    </div>
   <div class="buttons">
      <div class="container">
	<div class="row">
	  <div class="col-md-3 text-center">
	    <button type="button" class="btn btn-primary" id="deviceClass">Device Classification »</button>
	  </div>
	  <div class="col-md-3 text-center">
	    <button type="button" class="btn btn-success disabled" id="pathGeneration">Path Generation »</button>
	  </div>
	  <div class="col-md-3 text-center">
	    <button class="btn btn-warning" id="clear">Clear</button>
	  </div>
	  <div class="col-md-3 text-center">
	    <button class="btn btn-danger disabled" id="draw">Draw Charts</button>
	  </div>

	</div>
      </div>
   </div>
   <br>

   <div class="col-md-12" style="height:500px;">
      <div class="container" id="myCanvas" display="block" style="height:500px" overflow="scroll">
	<svg height="500" width="100%">
	</svg>
      </div>
    </div>
    <p></p>

    <div class="container">
      <div class="row">
	<div class="col-md-12">
	  <table class="table table-striped">
	  <thead>
	      <tr>
		<th>#</th>
		<th>Mac address</th>
		<th>color</th>
		<th>number of points</th>
	      </tr>
	  </thead>
	  <tbody class="deviceList">
	  </tbody>
	</table>
	</div>
      </div>
    </div>

    <div class="container">
      <canvas id="chartCanvas" width=1000px height=410px></canvas>
    </div>
    <div class="container">
      <canvas id="chartCanvas2" width=1000px height=600px></canvas>
    </div>

    <div id="spaceFiller" style="height:1000px;"></div>
  </body>


  <script type="text/javascript">
    var defaultData = <%- defaultData %>


    var x=[];
    var y=[];
    var minX=10000;
    var minY=10000;
    var maxX=-1;
    var maxY=-1;
    var count=[];
    var maxcount = 0;
    console.log(defaultData[0]);
    for (var i = 0; i < defaultData.length ; ++i) {
			x[i]=defaultData[i].x;
        y[i]=defaultData[i].y;
	if (x[i] < minX) minX=x[i];
	if (x[i] > maxX) maxX=x[i];
	if (y[i] > maxY) maxY=y[i];		
        if (y[i] < minY) minY=y[i];
		   if (typeof count[([x[i],y[i]])] === 'undefined') {
		   count[([x[i],y[i]])]=1;
		               if (maxcount < count[([x[i],y[i]])])
					      maxcount = count[([x[i],y[i]])];

        } else {
            count[([x[i],y[i]])]++;
            if (maxcount < count[([x[i],y[i]])])
                maxcount = count[([x[i],y[i]])];
        }
    }
    var drawn=[];
    var rightshift = Math.round(($("svg").width()-(maxX-minX))/2);
    if (rightshift<0) rightshift = 20;
    var upshift = Math.round(($("svg").height()-(maxY-minY))/2);
    if (upshift<0) upshift = 20;

    $("#myCanvas").css("background-position","-"+(Math.round(minX)-rightshift)+"px -"+(Math.round(minY)-upshift)+"px");

    var maxcolor = 0x702F00;
    var mincolor = 0x702FFF;

    var svghtml = $("svg").html();

    for (var i = 0; i < defaultData.length ; ++i) {

	if (typeof drawn[([x[i],y[i]])] === 'undefined') {
        var xx = (x[i]-minX);
		var yy = (y[i]-minY);
		var fraction = count[([x[i],y[i]])]*1./maxcount;
		color  = Math.round(mincolor+fraction*(maxcolor-mincolor));
			
		var centerX = xx+rightshift;
		var centerY = yy+upshift;
	        var radius = Math.round(1+fraction*3);
		svghtml += "<circle cx=\""+centerX+"\" cy=\""+centerY+"\" r=\""+radius+"\" stroke=\"black\" stroke-width=\"1\" fill=\"#"+color.toString(16)+"\" />";
	}
    }
    $("svg").html(svghtml);
			
    var pointsvg = svghtml;
    $("#clear").on("click", function() {
	$("svg").html(pointsvg);
    });


    var devicep = 0;
    var devicesvg;
    var devices = [];
    var colors = [];
    var deviceListhtml=$(".deviceList").html();
    $("#deviceClass").on("click",function() {

			
        if (devicep==0) {
            defaultData.sort(function(a,b) {
		if (a.id>b.id) return 1;
		else if (a.id<b.id) return -1;
		else if (a.time>b.time) return 1;
		else if (a.time<b.time) return -1;
		else return 0;
	    });
	    var currid = defaultData[0].id;
	    var getRandomColor = function(id) {
		if (id=="178724486156790") return "#FF0000";
		if (id=="187380439366208") return "#00FFFF";			
		var letters = "0123456789ABCDEF";
		var color = "#";
		for (var i = 0; i < 6; i++ ) {
		    color += letters[Math.floor(Math.random() * 16)];
		}
                return color;
	    }
	    var printTrajectory = function(trajectory, id, color) {
		var svgret="";
                                         
		for (var j=1; j<trajectory.length; ++j){
			svgret += "<line class=\""+id+"\" x1=\""+trajectory[j-1][0]+"\" \
					 x2=\""+trajectory[j][0]+"\" \
					 y1=\""+trajectory[j-1][1]+"\" \
                                         y2=\""+trajectory[j][1]+"\" \
                                         stroke=\""+color+"\"stroke-width=2 />";
            	 }
		return svgret;
	    }

	    var displayMac = function(id) {
		var idm = id;
	        while (idm.length<12) {
			idm='0'+idm;
		}
	        var result = "";
		for (var i=0; i< idm.length; ++i){
		    result+=idm[i].toUpperCase();
		    if (i%2 && i!= idm.length-1) result+=':';
		}
		return result;
	    }

            var trajectory = [[defaultData[0].x-minX+rightshift,defaultData[0].y-minY+upshift,defaultData[0].time]];
            for (var i=0; i< defaultData.length; ++i) {
		var newid = defaultData[i].id;
		if (newid==currid) {
                    trajectory.push([defaultData[i].x-minX+rightshift, defaultData[i].y-minY+upshift,defaultData[i].time]);
                } else {
		    devices.push(trajectory);
		    var color = getRandomColor(currid);
		    colors.push(color);
		    deviceListhtml+="<tr class=\"t"+devices.length+" t"+color+"\"><td>"+devices.length+"</td><td>"+displayMac(currid)+"</td><td><div style=\"background-color:"+color+";\">"+color+"</div></td><td>"+trajectory.length+"</td></tr>";
                    var num_traj = trajectory.length-1;
			if (num_traj > 0) {
				svghtml += printTrajectory(trajectory,devices.length,color);
			} 
	            trajectory = [[defaultData[i].x-minX+rightshift, defaultData[i].y-minY+upshift,defaultData[i].time]];
		    currid = newid;
                }
            }
	    devices.push(trajectory);
	    var color = getRandomColor(currid);
            colors.push(color);
	    deviceListhtml+="<tr class=\"t"+devices.length+" t"+color+"\"><td>"+devices.length+"</td><td>"+displayMac(currid)+"</td><td><div style=\"background-color:"+color+";\">"+color+"</div></td><td>"+trajectory.length+"</td></tr>";
            var num_traj = trajectory.length-1;
		if (num_traj > 0) {
		    svghtml += printTrajectory(trajectory,devices.length,color);
		} 
	    devicesvg=svghtml;
	    devicep=1;			
	}
	$("svg").html(devicesvg);
        $(".deviceList").html(deviceListhtml);

	$("#pathGeneration").removeClass("disabled");				
	$("#draw").removeClass("disabled");				

	$("line").hover(function() {
	    $("line").hide();
	    $("."+$(this).attr("class")).show();
	    $("tbody > tr").hide();
	    $(".t"+$(this).attr("class")).show();
        }, function() {
            $("line").show();
	    $("tr").show();
	});

    });

    smoothTraj = function(trajectory, color, firstrun) {

	if (firstrun) {
	   if (trajectory.length <= 1) return "";
           var svgret;
	   if (trajectory.length == 2) {
	       svgret="L "+trajectory[1][0]+" "+trajectory[1][1]+" ";
	   } else if (trajectory.length == 3) {
	       svgret="Q "+trajectory[1][0]+" "+trajectory[1][1]+", "+trajectory[2][0]+" "+trajectory[2][1]+" ";
	   } else if (trajectory.length >= 4) {
	       svgret="C "+trajectory[1][0]+" "+trajectory[1][1]+", "+trajectory[2][0]+" "+trajectory[2][1]+", "+trajectory[3][0]+" "+trajectory[3][1]+" ";
	       svgret+=smoothTraj(trajectory.slice(4),"",0);
	   }
	} else {
	   if (trajectory.length < 1) return "";
           else if (trajectory.length == 1) return "T "+trajectory[0][0]+" "+trajectory[0][1]+" ";
	   else if (trajectory.length >= 2) return "S "+trajectory[0][0]+" "+trajectory[0][1]+", "+trajectory[1][0]+" "+trajectory[1][1]+" "+smoothTraj(trajectory.slice(2),"",0);
        }
					
	return "<path class=\""+firstrun+"\" d= \" M" +trajectory[0][0]+ " " +trajectory[0][1]+ " " + svgret + "\" stroke=\"" +color+ "\" fill=\"none\" style=\"stroke-width: 2px\"></path>";
     };


					
    $("#pathGeneration").on("click", function() {
        var pathsvg;
	svghtml = pointsvg;				
					
	for (var i=0; i < devices.length; ++i) {
	        var trajectory = devices[i];
	        var color = colors[i];
	        var num_traj = trajectory.length-1;

	        
                   svghtml += smoothTraj(trajectory,color,i+1); 
               
	}
	pathsvg = svghtml;
        $("svg").html(svghtml);
	$("path").hover(function() {
	   $("path").hide();
			  $(this).show();
			  $("tbody > tr").hide();
			  $(".t"+ $(this).attr("class")).show();
        }, function() {
			  $("path").show();
			  $("tr").show();
	});
	
     });

     function drawChart(chartName, result, x, y) {
          var sum = 0;
          var sAngle = 0;
          var context = document.getElementById('chartCanvas').getContext('2d');
          context.textAlign = "center";
          for (var i = 0; i < result.length; ++i) {
            sum += result[i];
          }
	  var width = 1000;
          var height = 500;
          var radius = 100;
	  context.font = "30px Arial";
	  context.fillText(chartName, 0.5*width, 100);
          context.translate(x, y);

          context.strokeStyle = "#000000";
          context.fillStyle = "#000000";

          context.font = "15px Arial";
          var colorArray = ["#aabbcc", "#bbccdd", "#ccddee", "#ddeeff"];
          for (var i = 0; i < result.length; ++i) {
            var percentage = result[i] / sum;

            context.beginPath();

            context.rotate(sAngle);
            context.moveTo(0, 0);
            context.lineTo(50, 0);
            context.rotate(-sAngle);

            context.arc(0, 0, radius, sAngle, sAngle + percentage * 2 * Math.PI, false);

            sAngle += percentage * 2 * Math.PI;

            context.rotate(sAngle);
            context.moveTo(radius, 0);
            context.lineTo(0, 0);
            context.rotate(-sAngle);

            context.fillStyle = colorArray[i];

            context.fill();

            context.lineWidth = 1;
            context.strokeStyle = "#666666";
            context.stroke();
          }

          sAngle = 0;
          for (var i = 0; i < result.length; ++i) {

            var percentage = result[i] / sum;
            sAngle += percentage * Math.PI;
            context.beginPath();
            var textInfo = "";
            if (i==0) textInfo+="1s";
            else if (i==1) textInfo+="10s";
	    else if (i==2) textInfo+="1 min";
	    else textInfo+="1+ min";
	
            //var textInfo = i;
            context.rotate(sAngle);
            context.fillStyle = "#000000";
            if (percentage > 0.25) {
              //draw the text inside pie chart
              context.translate(40, 0);
              context.rotate(-sAngle);
              context.fillText(textInfo, 0, 0);
              context.rotate(sAngle);
              context.translate(-40, 0);
            } else {
              //too small to draw the text inside pie chart.
              context.translate(60, 0);
              context.rotate(-sAngle);
              context.fillText(textInfo, 0, 0);
              context.rotate(sAngle);
              context.translate(-60, 0);
            }
            context.rotate(-sAngle);

            sAngle += percentage * Math.PI;
          }

          context.translate(100, 0);

          var offset = result.length * 15 / 2;
          context.font = "15px Arial";
          context.textAlign = "start";
          for (var i = 0; i < result.length; ++i) {
            var percentage = result[i] / sum;
	    var textInfo = result[i] + " devices stayed for ";
            if (i==0) textInfo+="less than 1 second";
            else if (i==1) textInfo+="less than 10 seconds";
	    else if (i==2) textInfo+="less than 1 minute";
	    else textInfo+="more than 1 minute";
			      
            context.beginPath();
            context.fillStyle = colorArray[i];
            context.fillRect(0, -offset + 15 * i, 10, 10);
            context.fillStyle = "#000000";
            context.fillText(textInfo, 15, -offset + 15 * i + 10);
          }

          context.translate(-100, 0);

          context.translate(-x, -y);
        }

    $("#draw").on("click",function() {


	function getInitTime(year, month, week, day, hour){
  	  currentT = new Date().getTime();
          currentT -= year*365*24*60*60*1000;
          currentT -= month*30*24*60*60*1000;
          currentT -= week*7*24*60*60*1000;
          currentT -= day*24*60*60*1000;
          currentT -= hour*60*60*1000;
          return currentT;
        }

	var maxTime = 0;
	var minTime = devices[0][0][2];				    
        var dwellCount = [0, 0, 0, 0];
        for (var i=0; i<devices.length; ++i) {
	    var dwellTime = devices[i][devices[i].length-1][2] - devices[i][0][2];
	    if (devices[i][devices[i].length-1][2] > maxTime) maxTime=devices[i][devices[i].length-1][2];
            if (devices[i][0][2]< minTime) minTime=devices[i][0][2];
					  
            if (dwellTime < 1000) {
              dwellCount[0] += 1;
            } else if (dwellTime < 10000) {
              dwellCount[1] += 1;
            } else if (dwellTime < 60000) {
              dwellCount[2] += 1;
            } else {
              dwellCount[3] += 1;
            }
          }
	  drawChart("Dwell Time of Devices", dwellCount, 500, 220);

				   var year = 0;
var month = 0;
var week = 0;
var aweek = 7*24*60*60*1000;
var day = 0;
				   var aday = 24*60*60*1000;
				   var ahour = 60*60*1000;
				   var hour = 0;
				   var amin = 60*1000;
				   maxTime = parseInt(maxTime);
				   minTime = parseInt(minTime);
				   var timeDiff = maxTime-minTime;
				   week = Math.floor(timeDiff/aweek);
				   day = Math.floor(timeDiff/aday);
				   hour = Math.ceil(timeDiff/ahour);
			    
//process
var xCount = 0;
var result = new Array();
var initT = minTime;

				   if (week) {
  xCount = week*7;
  for (var i=0; i<xCount; ++i){
  	result[i]=0;
  }
  for (var j=0; j<devices.length; ++j) {
    	var device = devices[j];
        for (var k=0; k<device.length; ++k) {
      	   var timeDiff = device[k][2]-initT;
           if (timeDiff>=0 /* && timeDiff<aweek*/) {
        	var pointWeek = Math.floor(timeDiff/aweek);
                timeDiff = timeDiff-pointWeek*aweek;
        	var pointDay = Math.floor(timeDiff/aday);
                ++result[pointWeek*7+pointDay];
           }
        }
  }
} else if (day) {
  xCount = day*24;
	for (var i=0; i<xCount; ++i){
  	result[i]=0;
  }
  for (var j=0; j<devices.length; ++j) {
      var device = devices[j];
      for (var k=0; k<device.length; ++k) {
      	var timeDiff = device[k][2]-initT;
        if (timeDiff>=0 /* && timeDiff<aweek*/) {
        	var pointDay = Math.floor(timeDiff/aday);
                timeDiff = timeDiff-pointDay*aday;
        	var pointHour = Math.floor(timeDiff/ahour);
                ++result[pointDay*24+pointHour];
         }
       }
   }
} else if (hour) {
  xCount = hour*60;
	for (var i=0; i<xCount; ++i){
  	result[i]=0;
  }
  for (var j=0; j<devices.length; ++j) {
      var device = devices[j];
      for (var k=0; k<device.length; ++k) {
      	var timeDiff = device[k][2]-initT;
        if (timeDiff>=0 /* && timeDiff<aweek*/) {
        	var pointHour = Math.floor(timeDiff/ahour);
                timeDiff = timeDiff-pointHour*ahour;
        	var pointMin = Math.floor(timeDiff/amin);
                ++result[pointHour*60+pointMin];
         }
       }
   }
}

function drawLineChart(result, initT, xCount, chartName, duration){
	var maxResult = 0;
  for (var i=0; i<xCount; ++i) {
  	if (result[i]>maxResult) maxResult=result[i];
  }
	var width = 1000;
  var height = 600;
  var minX = 0.2*width;
  var maxX = 0.9*width;
  var lenX = maxX-minX;
  var minY = 0.8*height;
  var maxY = 0.2*height;
  var lenY = minY-maxY;
  var canvas = document.getElementById("chartCanvas2");
	var ctx = canvas.getContext("2d");
	ctx.font = "15px Arial";
	ctx.textAlign="center";
  var xInterval = lenX/xCount;
  
  ctx.strokeStyle = "#000000";
  ctx.fillStyle = "#000000";
  var initD = new Date(initT);
  ctx.fillText(chartName+", starting from "+(initD.getHours()+1)+":"+(initD.getMinutes()+1)+" on "+initD.toDateString(),0.5*width,maxY-0.1*height);
  
  
  ctx.font = "10px Arial";
  //level 0
  ctx.lineWidth=2;
	ctx.moveTo(minX,minY);
  ctx.lineTo(maxX,minY);
  ctx.stroke();
  ctx.fillText("0",0.15*width,minY);
 
  var level = 4;
  ctx.lineWidth=0.5;
  for (var i=1; i<=level; ++i) {
  	var frac=i/level;
		ctx.moveTo(minX,minY-frac*lenY);
  	ctx.lineTo(maxX,minY-frac*lenY);
  	ctx.stroke();
  	ctx.fillText(frac*maxResult,0.15*width,minY-frac*lenY);
  }
  
 	ctx.fillStyle = "#67A5F3";
  ctx.lineWidth=3;
  var prevX;
  var prevY;
  if (duration=="week" || duration=="month") {
    for (var i=0; i<xCount; ++i) {
      var time = new Date(initT+i*aday);
      var currX=minX+xInterval*i;
      var currY=minY-result[i]/maxResult*lenY;
      if (xCount<=10 || i%5==0 || i==xCount-1) {
      	 ctx.font = "10px Arial";
         ctx.fillStyle = "#000000";
         ctx.fillText(time.getDate()+'/'+(time.getMonth()+1),currX,minY+0.05*width);
      }
      ctx.beginPath();
      ctx.strokeStyle = "#67A5F3";
      ctx.arc(currX,currY,2,0,2*Math.PI);
      ctx.stroke();
      if (i==0) {
        prevX=currX;
        prevY=currY;
      } else {
          ctx.moveTo(prevX,prevY);
          ctx.lineTo(currX,currY);
          ctx.strokeStyle = "#67A5F3";
          ctx.stroke();
          prevX=currX;
          prevY=currY;
      }
    }
  } else if (duration=="year") {
      for (var i=0; i<xCount; ++i) {
      var time = new Date(initT+i*amonth);
      var currX=minX+xInterval*i;
      var currY=minY-result[i]/maxResult*lenY;
      ctx.fillText(time.getMonth()+1,currX,minY+0.05*width);
      ctx.beginPath();
      ctx.strokeStyle = "#67A5F3";
      ctx.arc(currX,currY,2,0,2*Math.PI);
      ctx.stroke();
      if (i==0) {
        prevX=currX;
        prevY=currY;
      } else {
          ctx.moveTo(prevX,prevY);
          ctx.lineTo(currX,currY);
          ctx.strokeStyle = "#67A5F3";
          ctx.stroke();
          prevX=currX;
          prevY=currY;
      }
    }
  } else if (duration=="hour") {
      for (var i=0; i<xCount; ++i) {
      var time = new Date(initT+i*amin);
      var currX=minX+xInterval*i;
      var currY=minY-result[i]/maxResult*lenY;
      if (xCount<=10 || i%5==0 || i==xCount-1) {
      	 ctx.font = "10px Arial";
     ctx.fillStyle = "#000000";
         ctx.fillText(time.getMinutes()+1,currX,minY+0.05*width);
      }

      console.log(initT+i*amin);
      ctx.beginPath();
      ctx.strokeStyle = "#67A5F3";
      ctx.arc(currX,currY,2,0,2*Math.PI);
      ctx.stroke();
      if (i==0) {
        prevX=currX;
        prevY=currY;
      } else {
          ctx.moveTo(prevX,prevY);
          ctx.lineTo(currX,currY);
          ctx.strokeStyle = "#67A5F3";
          ctx.stroke();
          prevX=currX;
          prevY=currY;
      }
    }
  }
  
}

//call draw function

drawLineChart(result, initT, xCount,"Number of devices detected in "+hour+" hour(s)", "hour");

      });					
  </script>
  <!--script src="js/py.js"></script-->
</html>
